// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// temperature
double temperature(int h, int profile, Rcpp::List profile_pars);
RcppExport SEXP _estDLVM_temperature(SEXP hSEXP, SEXP profileSEXP, SEXP profile_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profile_pars(profile_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(temperature(h, profile, profile_pars));
    return rcpp_result_gen;
END_RCPP
}
// LC_em_step
Rcpp::List LC_em_step(arma::mat Y, arma::colvec yv, int C, int ns, int r, int n, int k, arma::rowvec piv, arma::mat Piv, arma::mat Psi, arma::cube Phi);
RcppExport SEXP _estDLVM_LC_em_step(SEXP YSEXP, SEXP yvSEXP, SEXP CSEXP, SEXP nsSEXP, SEXP rSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pivSEXP, SEXP PivSEXP, SEXP PsiSEXP, SEXP PhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Piv(PivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_em_step(Y, yv, C, ns, r, n, k, piv, Piv, Psi, Phi));
    return rcpp_result_gen;
END_RCPP
}
// LC_tem_step
Rcpp::List LC_tem_step(arma::mat Y, arma::colvec yv, int C, int ns, int r, int n, int k, arma::rowvec piv, arma::mat Piv, arma::mat Psi, arma::cube Phi, double temp);
RcppExport SEXP _estDLVM_LC_tem_step(SEXP YSEXP, SEXP yvSEXP, SEXP CSEXP, SEXP nsSEXP, SEXP rSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pivSEXP, SEXP PivSEXP, SEXP PsiSEXP, SEXP PhiSEXP, SEXP tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Piv(PivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< double >::type temp(tempSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_tem_step(Y, yv, C, ns, r, n, k, piv, Piv, Psi, Phi, temp));
    return rcpp_result_gen;
END_RCPP
}
// LC_em
Rcpp::List LC_em(arma::mat Y, arma::colvec yv, int k, double tol, int maxit, arma::rowvec piv, arma::mat Piv, arma::mat Psi, arma::cube Phi);
RcppExport SEXP _estDLVM_LC_em(SEXP YSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP pivSEXP, SEXP PivSEXP, SEXP PsiSEXP, SEXP PhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Piv(PivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_em(Y, yv, k, tol, maxit, piv, Piv, Psi, Phi));
    return rcpp_result_gen;
END_RCPP
}
// LC_tem
Rcpp::List LC_tem(arma::mat Y, arma::colvec yv, int k, double tol, int maxit, arma::rowvec piv, arma::mat Piv, arma::mat Psi, arma::cube Phi, int profile, Rcpp::List profile_pars);
RcppExport SEXP _estDLVM_LC_tem(SEXP YSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP pivSEXP, SEXP PivSEXP, SEXP PsiSEXP, SEXP PhiSEXP, SEXP profileSEXP, SEXP profile_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Piv(PivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< int >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profile_pars(profile_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_tem(Y, yv, k, tol, maxit, piv, Piv, Psi, Phi, profile, profile_pars));
    return rcpp_result_gen;
END_RCPP
}
// Initialization_step_C
Rcpp::List Initialization_step_C(arma::mat Y, arma::colvec yv, int ns, int r, int C, int k, int n_parents);
RcppExport SEXP _estDLVM_Initialization_step_C(SEXP YSEXP, SEXP yvSEXP, SEXP nsSEXP, SEXP rSEXP, SEXP CSEXP, SEXP kSEXP, SEXP n_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(Initialization_step_C(Y, yv, ns, r, C, k, n_parents));
    return rcpp_result_gen;
END_RCPP
}
// MaxExp_step_C
Rcpp::List MaxExp_step_C(arma::mat Y, arma::colvec yv, int ns, int n, int r, int C, arma::mat V, int k, int R, double tol);
RcppExport SEXP _estDLVM_MaxExp_step_C(SEXP YSEXP, SEXP yvSEXP, SEXP nsSEXP, SEXP nSEXP, SEXP rSEXP, SEXP CSEXP, SEXP VSEXP, SEXP kSEXP, SEXP RSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxExp_step_C(Y, yv, ns, n, r, C, V, k, R, tol));
    return rcpp_result_gen;
END_RCPP
}
// LastMaxExp_step_C
Rcpp::List LastMaxExp_step_C(arma::mat Y, arma::colvec yv, int ns, int n, int r, int C, arma::mat V, int k, int R, double tol);
RcppExport SEXP _estDLVM_LastMaxExp_step_C(SEXP YSEXP, SEXP yvSEXP, SEXP nsSEXP, SEXP nSEXP, SEXP rSEXP, SEXP CSEXP, SEXP VSEXP, SEXP kSEXP, SEXP RSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(LastMaxExp_step_C(Y, yv, ns, n, r, C, V, k, R, tol));
    return rcpp_result_gen;
END_RCPP
}
// CrossOver_step_C
Rcpp::List CrossOver_step_C(int ns, Rcpp::List P, int n_children, int n_parents);
RcppExport SEXP _estDLVM_CrossOver_step_C(SEXP nsSEXP, SEXP PSEXP, SEXP n_childrenSEXP, SEXP n_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(CrossOver_step_C(ns, P, n_children, n_parents));
    return rcpp_result_gen;
END_RCPP
}
// Selection_step_C
Rcpp::List Selection_step_C(Rcpp::List PV_p, Rcpp::List PV_c, arma::rowvec fit_p, arma::rowvec fit_c, int n_parents, int n_children);
RcppExport SEXP _estDLVM_Selection_step_C(SEXP PV_pSEXP, SEXP PV_cSEXP, SEXP fit_pSEXP, SEXP fit_cSEXP, SEXP n_parentsSEXP, SEXP n_childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type PV_p(PV_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type PV_c(PV_cSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type fit_p(fit_pSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type fit_c(fit_cSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    rcpp_result_gen = Rcpp::wrap(Selection_step_C(PV_p, PV_c, fit_p, fit_c, n_parents, n_children));
    return rcpp_result_gen;
END_RCPP
}
// Mutation_step_C
arma::mat Mutation_step_C(int ns, int k, arma::mat V, double prob_mut);
RcppExport SEXP _estDLVM_Mutation_step_C(SEXP nsSEXP, SEXP kSEXP, SEXP VSEXP, SEXP prob_mutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type prob_mut(prob_mutSEXP);
    rcpp_result_gen = Rcpp::wrap(Mutation_step_C(ns, k, V, prob_mut));
    return rcpp_result_gen;
END_RCPP
}
// LC_eem
Rcpp::List LC_eem(arma::mat Y, arma::colvec yv, int k, double tol, int maxit, int n_parents, int n_children, double prob_mut, int R);
RcppExport SEXP _estDLVM_LC_eem(SEXP YSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP n_parentsSEXP, SEXP n_childrenSEXP, SEXP prob_mutSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    Rcpp::traits::input_parameter< double >::type prob_mut(prob_mutSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_eem(Y, yv, k, tol, maxit, n_parents, n_children, prob_mut, R));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_estDLVM_temperature", (DL_FUNC) &_estDLVM_temperature, 3},
    {"_estDLVM_LC_em_step", (DL_FUNC) &_estDLVM_LC_em_step, 11},
    {"_estDLVM_LC_tem_step", (DL_FUNC) &_estDLVM_LC_tem_step, 12},
    {"_estDLVM_LC_em", (DL_FUNC) &_estDLVM_LC_em, 9},
    {"_estDLVM_LC_tem", (DL_FUNC) &_estDLVM_LC_tem, 11},
    {"_estDLVM_Initialization_step_C", (DL_FUNC) &_estDLVM_Initialization_step_C, 7},
    {"_estDLVM_MaxExp_step_C", (DL_FUNC) &_estDLVM_MaxExp_step_C, 10},
    {"_estDLVM_LastMaxExp_step_C", (DL_FUNC) &_estDLVM_LastMaxExp_step_C, 10},
    {"_estDLVM_CrossOver_step_C", (DL_FUNC) &_estDLVM_CrossOver_step_C, 4},
    {"_estDLVM_Selection_step_C", (DL_FUNC) &_estDLVM_Selection_step_C, 6},
    {"_estDLVM_Mutation_step_C", (DL_FUNC) &_estDLVM_Mutation_step_C, 4},
    {"_estDLVM_LC_eem", (DL_FUNC) &_estDLVM_LC_eem, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_estDLVM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
