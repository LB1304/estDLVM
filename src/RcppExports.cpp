// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// HMcat_Temperature
double HMcat_Temperature(int h, int profile, Rcpp::List profile_pars);
RcppExport SEXP _estDLVM_HMcat_Temperature(SEXP hSEXP, SEXP profileSEXP, SEXP profile_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profile_pars(profile_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_Temperature(h, profile, profile_pars));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_ComputeLogLik
Rcpp::List HMcat_ComputeLogLik(arma::cube S, arma::colvec yv, arma::rowvec piv, arma::cube Pi, arma::cube Phi);
RcppExport SEXP _estDLVM_HMcat_ComputeLogLik(SEXP SSEXP, SEXP yvSEXP, SEXP pivSEXP, SEXP PiSEXP, SEXP PhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_ComputeLogLik(S, yv, piv, Pi, Phi));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_CheckConvergence
bool HMcat_CheckConvergence(double lk, double lk_old, arma::rowvec piv, arma::cube Pi, arma::cube Phi, arma::rowvec piv_old, arma::cube Pi_old, arma::cube Phi_old, int it, double tol_lk, double tol_theta, int maxit);
RcppExport SEXP _estDLVM_HMcat_CheckConvergence(SEXP lkSEXP, SEXP lk_oldSEXP, SEXP pivSEXP, SEXP PiSEXP, SEXP PhiSEXP, SEXP piv_oldSEXP, SEXP Pi_oldSEXP, SEXP Phi_oldSEXP, SEXP itSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lk(lkSEXP);
    Rcpp::traits::input_parameter< double >::type lk_old(lk_oldSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv_old(piv_oldSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi_old(Pi_oldSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi_old(Phi_oldSEXP);
    Rcpp::traits::input_parameter< int >::type it(itSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_CheckConvergence(lk, lk_old, piv, Pi, Phi, piv_old, Pi_old, Phi_old, it, tol_lk, tol_theta, maxit));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_E_step
Rcpp::List HMcat_E_step(arma::colvec yv, int ns, int TT, int k, Rcpp::List llk_list, arma::cube Pi);
RcppExport SEXP _estDLVM_HMcat_E_step(SEXP yvSEXP, SEXP nsSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP llk_listSEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type llk_list(llk_listSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_E_step(yv, ns, TT, k, llk_list, Pi));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_TE_step
Rcpp::List HMcat_TE_step(arma::colvec yv, int ns, int TT, int k, Rcpp::List llk_list, arma::cube Pi, double temp);
RcppExport SEXP _estDLVM_HMcat_TE_step(SEXP yvSEXP, SEXP nsSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP llk_listSEXP, SEXP PiSEXP, SEXP tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type llk_list(llk_listSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< double >::type temp(tempSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_TE_step(yv, ns, TT, k, llk_list, Pi, temp));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_M_step
Rcpp::List HMcat_M_step(arma::mat Sv, int n, int ns, int r, int TT, int k, arma::rowvec Cv, double C, Rcpp::List E_list, int modBasic);
RcppExport SEXP _estDLVM_HMcat_M_step(SEXP SvSEXP, SEXP nSEXP, SEXP nsSEXP, SEXP rSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP CvSEXP, SEXP CSEXP, SEXP E_listSEXP, SEXP modBasicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Sv(SvSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type Cv(CvSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type E_list(E_listSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_M_step(Sv, n, ns, r, TT, k, Cv, C, E_list, modBasic));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_EM
Rcpp::List HMcat_EM(arma::cube S, arma::colvec yv, int k, double tol_lk, double tol_theta, int maxit, arma::rowvec piv, arma::cube Pi, arma::cube Phi, int modBasic);
RcppExport SEXP _estDLVM_HMcat_EM(SEXP SSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP pivSEXP, SEXP PiSEXP, SEXP PhiSEXP, SEXP modBasicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_EM(S, yv, k, tol_lk, tol_theta, maxit, piv, Pi, Phi, modBasic));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_TEM
Rcpp::List HMcat_TEM(arma::cube S, arma::colvec yv, int k, double tol_lk, double tol_theta, int maxit, arma::rowvec piv, arma::cube Pi, arma::cube Phi, int modBasic, int profile, Rcpp::List profile_pars);
RcppExport SEXP _estDLVM_HMcat_TEM(SEXP SSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP pivSEXP, SEXP PiSEXP, SEXP PhiSEXP, SEXP modBasicSEXP, SEXP profileSEXP, SEXP profile_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    Rcpp::traits::input_parameter< int >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profile_pars(profile_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_TEM(S, yv, k, tol_lk, tol_theta, maxit, piv, Pi, Phi, modBasic, profile, profile_pars));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_Initialization_step
Rcpp::List HMcat_Initialization_step(arma::cube S, arma::colvec yv, int ns, int r, int TT, int k, int n_parents);
RcppExport SEXP _estDLVM_HMcat_Initialization_step(SEXP SSEXP, SEXP yvSEXP, SEXP nsSEXP, SEXP rSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP n_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_Initialization_step(S, yv, ns, r, TT, k, n_parents));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_ME_step
Rcpp::List HMcat_ME_step(arma::cube S, arma::colvec yv, int k, double tol_lk, double tol_theta, int maxit, Rcpp::List P, int modBasic);
RcppExport SEXP _estDLVM_HMcat_ME_step(SEXP SSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP PSEXP, SEXP modBasicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_ME_step(S, yv, k, tol_lk, tol_theta, maxit, P, modBasic));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_LastME_step
Rcpp::List HMcat_LastME_step(arma::cube S, arma::colvec yv, int k, double tol_lk, double tol_theta, int maxit, Rcpp::List P, int modBasic);
RcppExport SEXP _estDLVM_HMcat_LastME_step(SEXP SSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP PSEXP, SEXP modBasicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_LastME_step(S, yv, k, tol_lk, tol_theta, maxit, P, modBasic));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_CrossOver_step
Rcpp::List HMcat_CrossOver_step(int ns, int TT, Rcpp::List P, int n_children, int n_parents);
RcppExport SEXP _estDLVM_HMcat_CrossOver_step(SEXP nsSEXP, SEXP TTSEXP, SEXP PSEXP, SEXP n_childrenSEXP, SEXP n_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_CrossOver_step(ns, TT, P, n_children, n_parents));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_Selection_step
Rcpp::List HMcat_Selection_step(Rcpp::List PV_p, Rcpp::List PV_c, arma::rowvec fit_p, arma::rowvec fit_c, int n_parents, int n_children);
RcppExport SEXP _estDLVM_HMcat_Selection_step(SEXP PV_pSEXP, SEXP PV_cSEXP, SEXP fit_pSEXP, SEXP fit_cSEXP, SEXP n_parentsSEXP, SEXP n_childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type PV_p(PV_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type PV_c(PV_cSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type fit_p(fit_pSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type fit_c(fit_cSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_Selection_step(PV_p, PV_c, fit_p, fit_c, n_parents, n_children));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_Mutation_step
Rcpp::List HMcat_Mutation_step(int ns, int TT, int k, Rcpp::List P, double prob_mut);
RcppExport SEXP _estDLVM_HMcat_Mutation_step(SEXP nsSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP PSEXP, SEXP prob_mutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type prob_mut(prob_mutSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_Mutation_step(ns, TT, k, P, prob_mut));
    return rcpp_result_gen;
END_RCPP
}
// HMcat_EEM
Rcpp::List HMcat_EEM(arma::cube S, arma::colvec yv, int k, double tol_lk, double tol_theta, int maxit, int modBasic, int n_parents, int n_children, double prob_mut, int R);
RcppExport SEXP _estDLVM_HMcat_EEM(SEXP SSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP modBasicSEXP, SEXP n_parentsSEXP, SEXP n_childrenSEXP, SEXP prob_mutSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    Rcpp::traits::input_parameter< double >::type prob_mut(prob_mutSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcat_EEM(S, yv, k, tol_lk, tol_theta, maxit, modBasic, n_parents, n_children, prob_mut, R));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_Temperature
double HMcont_Temperature(int h, int profile, Rcpp::List profile_pars);
RcppExport SEXP _estDLVM_HMcont_Temperature(SEXP hSEXP, SEXP profileSEXP, SEXP profile_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profile_pars(profile_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_Temperature(h, profile, profile_pars));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm
arma::colvec dmvnorm(arma::mat x, arma::colvec mean, arma::mat sigma);
RcppExport SEXP _estDLVM_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm(x, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_ComputeLogLik
Rcpp::List HMcont_ComputeLogLik(arma::cube S, arma::rowvec piv, arma::cube Pi, arma::mat Mu, arma::mat Si);
RcppExport SEXP _estDLVM_HMcont_ComputeLogLik(SEXP SSEXP, SEXP pivSEXP, SEXP PiSEXP, SEXP MuSEXP, SEXP SiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Si(SiSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_ComputeLogLik(S, piv, Pi, Mu, Si));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_CheckConvergence
bool HMcont_CheckConvergence(double lk, double lk_old, arma::rowvec piv, arma::cube Pi, arma::mat Mu, arma::mat Si, arma::rowvec piv_old, arma::cube Pi_old, arma::mat Mu_old, arma::mat Si_old, int it, double tol_lk, double tol_theta, int maxit);
RcppExport SEXP _estDLVM_HMcont_CheckConvergence(SEXP lkSEXP, SEXP lk_oldSEXP, SEXP pivSEXP, SEXP PiSEXP, SEXP MuSEXP, SEXP SiSEXP, SEXP piv_oldSEXP, SEXP Pi_oldSEXP, SEXP Mu_oldSEXP, SEXP Si_oldSEXP, SEXP itSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lk(lkSEXP);
    Rcpp::traits::input_parameter< double >::type lk_old(lk_oldSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv_old(piv_oldSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi_old(Pi_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mu_old(Mu_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Si_old(Si_oldSEXP);
    Rcpp::traits::input_parameter< int >::type it(itSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_CheckConvergence(lk, lk_old, piv, Pi, Mu, Si, piv_old, Pi_old, Mu_old, Si_old, it, tol_lk, tol_theta, maxit));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_E_step
Rcpp::List HMcont_E_step(int n, int TT, int k, Rcpp::List llk_list, arma::cube Pi);
RcppExport SEXP _estDLVM_HMcont_E_step(SEXP nSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP llk_listSEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type llk_list(llk_listSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_E_step(n, TT, k, llk_list, Pi));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_TE_step
Rcpp::List HMcont_TE_step(int n, int TT, int k, Rcpp::List llk_list, arma::cube Pi, double temp);
RcppExport SEXP _estDLVM_HMcont_TE_step(SEXP nSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP llk_listSEXP, SEXP PiSEXP, SEXP tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type llk_list(llk_listSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< double >::type temp(tempSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_TE_step(n, TT, k, llk_list, Pi, temp));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_M_step
Rcpp::List HMcont_M_step(arma::mat Sv, int n, int r, int TT, int k, Rcpp::List E_list, int modBasic);
RcppExport SEXP _estDLVM_HMcont_M_step(SEXP SvSEXP, SEXP nSEXP, SEXP rSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP E_listSEXP, SEXP modBasicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Sv(SvSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type E_list(E_listSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_M_step(Sv, n, r, TT, k, E_list, modBasic));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_EM
Rcpp::List HMcont_EM(arma::cube S, int k, double tol_lk, double tol_theta, int maxit, arma::rowvec piv, arma::cube Pi, arma::mat Mu, arma::mat Si, int modBasic);
RcppExport SEXP _estDLVM_HMcont_EM(SEXP SSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP pivSEXP, SEXP PiSEXP, SEXP MuSEXP, SEXP SiSEXP, SEXP modBasicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_EM(S, k, tol_lk, tol_theta, maxit, piv, Pi, Mu, Si, modBasic));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_TEM
Rcpp::List HMcont_TEM(arma::cube S, int k, double tol_lk, double tol_theta, int maxit, arma::rowvec piv, arma::cube Pi, arma::mat Mu, arma::mat Si, int modBasic, int profile, Rcpp::List profile_pars);
RcppExport SEXP _estDLVM_HMcont_TEM(SEXP SSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP pivSEXP, SEXP PiSEXP, SEXP MuSEXP, SEXP SiSEXP, SEXP modBasicSEXP, SEXP profileSEXP, SEXP profile_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    Rcpp::traits::input_parameter< int >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profile_pars(profile_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_TEM(S, k, tol_lk, tol_theta, maxit, piv, Pi, Mu, Si, modBasic, profile, profile_pars));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_Initialization_step
Rcpp::List HMcont_Initialization_step(arma::cube S, int n, int r, int TT, int k, int n_parents);
RcppExport SEXP _estDLVM_HMcont_Initialization_step(SEXP SSEXP, SEXP nSEXP, SEXP rSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP n_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_Initialization_step(S, n, r, TT, k, n_parents));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_ME_step
Rcpp::List HMcont_ME_step(arma::cube S, int k, double tol_lk, double tol_theta, int maxit, Rcpp::List P, int modBasic);
RcppExport SEXP _estDLVM_HMcont_ME_step(SEXP SSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP PSEXP, SEXP modBasicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_ME_step(S, k, tol_lk, tol_theta, maxit, P, modBasic));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_LastME_step
Rcpp::List HMcont_LastME_step(arma::cube S, int k, double tol_lk, double tol_theta, int maxit, Rcpp::List P, int modBasic);
RcppExport SEXP _estDLVM_HMcont_LastME_step(SEXP SSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP PSEXP, SEXP modBasicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_LastME_step(S, k, tol_lk, tol_theta, maxit, P, modBasic));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_CrossOver_step
Rcpp::List HMcont_CrossOver_step(int n, int TT, Rcpp::List P, int n_children, int n_parents);
RcppExport SEXP _estDLVM_HMcont_CrossOver_step(SEXP nSEXP, SEXP TTSEXP, SEXP PSEXP, SEXP n_childrenSEXP, SEXP n_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_CrossOver_step(n, TT, P, n_children, n_parents));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_Selection_step
Rcpp::List HMcont_Selection_step(Rcpp::List PV_p, Rcpp::List PV_c, arma::rowvec fit_p, arma::rowvec fit_c, int n_parents, int n_children);
RcppExport SEXP _estDLVM_HMcont_Selection_step(SEXP PV_pSEXP, SEXP PV_cSEXP, SEXP fit_pSEXP, SEXP fit_cSEXP, SEXP n_parentsSEXP, SEXP n_childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type PV_p(PV_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type PV_c(PV_cSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type fit_p(fit_pSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type fit_c(fit_cSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_Selection_step(PV_p, PV_c, fit_p, fit_c, n_parents, n_children));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_Mutation_step
Rcpp::List HMcont_Mutation_step(int n, int TT, int k, Rcpp::List P, double prob_mut);
RcppExport SEXP _estDLVM_HMcont_Mutation_step(SEXP nSEXP, SEXP TTSEXP, SEXP kSEXP, SEXP PSEXP, SEXP prob_mutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type prob_mut(prob_mutSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_Mutation_step(n, TT, k, P, prob_mut));
    return rcpp_result_gen;
END_RCPP
}
// HMcont_EEM
Rcpp::List HMcont_EEM(arma::cube S, int k, double tol_lk, double tol_theta, int maxit, int modBasic, int n_parents, int n_children, double prob_mut, int R);
RcppExport SEXP _estDLVM_HMcont_EEM(SEXP SSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP modBasicSEXP, SEXP n_parentsSEXP, SEXP n_childrenSEXP, SEXP prob_mutSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type modBasic(modBasicSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    Rcpp::traits::input_parameter< double >::type prob_mut(prob_mutSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(HMcont_EEM(S, k, tol_lk, tol_theta, maxit, modBasic, n_parents, n_children, prob_mut, R));
    return rcpp_result_gen;
END_RCPP
}
// LC_Temperature
double LC_Temperature(int h, int profile, Rcpp::List profile_pars);
RcppExport SEXP _estDLVM_LC_Temperature(SEXP hSEXP, SEXP profileSEXP, SEXP profile_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profile_pars(profile_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_Temperature(h, profile, profile_pars));
    return rcpp_result_gen;
END_RCPP
}
// LC_CheckConvergence
bool LC_CheckConvergence(double lk, double lk_old, arma::rowvec piv, arma::cube Phi, arma::rowvec piv_old, arma::cube Phi_old, int it, double tol_lk, double tol_theta, int maxit);
RcppExport SEXP _estDLVM_LC_CheckConvergence(SEXP lkSEXP, SEXP lk_oldSEXP, SEXP pivSEXP, SEXP PhiSEXP, SEXP piv_oldSEXP, SEXP Phi_oldSEXP, SEXP itSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lk(lkSEXP);
    Rcpp::traits::input_parameter< double >::type lk_old(lk_oldSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv_old(piv_oldSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi_old(Phi_oldSEXP);
    Rcpp::traits::input_parameter< int >::type it(itSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_CheckConvergence(lk, lk_old, piv, Phi, piv_old, Phi_old, it, tol_lk, tol_theta, maxit));
    return rcpp_result_gen;
END_RCPP
}
// LC_EM_step
Rcpp::List LC_EM_step(arma::mat S, arma::colvec yv, int C, int ns, int r, int n, int k, arma::rowvec piv, arma::mat Piv, arma::mat Psi, arma::cube Phi);
RcppExport SEXP _estDLVM_LC_EM_step(SEXP SSEXP, SEXP yvSEXP, SEXP CSEXP, SEXP nsSEXP, SEXP rSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pivSEXP, SEXP PivSEXP, SEXP PsiSEXP, SEXP PhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Piv(PivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_EM_step(S, yv, C, ns, r, n, k, piv, Piv, Psi, Phi));
    return rcpp_result_gen;
END_RCPP
}
// LC_TEM_step
Rcpp::List LC_TEM_step(arma::mat S, arma::colvec yv, int C, int ns, int r, int n, int k, arma::rowvec piv, arma::mat Piv, arma::mat Psi, arma::cube Phi, double temp);
RcppExport SEXP _estDLVM_LC_TEM_step(SEXP SSEXP, SEXP yvSEXP, SEXP CSEXP, SEXP nsSEXP, SEXP rSEXP, SEXP nSEXP, SEXP kSEXP, SEXP pivSEXP, SEXP PivSEXP, SEXP PsiSEXP, SEXP PhiSEXP, SEXP tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Piv(PivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< double >::type temp(tempSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_TEM_step(S, yv, C, ns, r, n, k, piv, Piv, Psi, Phi, temp));
    return rcpp_result_gen;
END_RCPP
}
// LC_EM
Rcpp::List LC_EM(arma::mat S, arma::colvec yv, int k, double tol_lk, double tol_theta, int maxit, arma::rowvec piv, arma::mat Piv, arma::mat Psi, arma::cube Phi);
RcppExport SEXP _estDLVM_LC_EM(SEXP SSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP pivSEXP, SEXP PivSEXP, SEXP PsiSEXP, SEXP PhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Piv(PivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_EM(S, yv, k, tol_lk, tol_theta, maxit, piv, Piv, Psi, Phi));
    return rcpp_result_gen;
END_RCPP
}
// LC_TEM
Rcpp::List LC_TEM(arma::mat S, arma::colvec yv, int k, double tol_lk, double tol_theta, int maxit, arma::rowvec piv, arma::mat Piv, arma::mat Psi, arma::cube Phi, int profile, Rcpp::List profile_pars);
RcppExport SEXP _estDLVM_LC_TEM(SEXP SSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP pivSEXP, SEXP PivSEXP, SEXP PsiSEXP, SEXP PhiSEXP, SEXP profileSEXP, SEXP profile_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type piv(pivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Piv(PivSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< int >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profile_pars(profile_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_TEM(S, yv, k, tol_lk, tol_theta, maxit, piv, Piv, Psi, Phi, profile, profile_pars));
    return rcpp_result_gen;
END_RCPP
}
// LC_Initialization_step
Rcpp::List LC_Initialization_step(arma::mat S, arma::colvec yv, int ns, int r, int C, int k, int n_parents);
RcppExport SEXP _estDLVM_LC_Initialization_step(SEXP SSEXP, SEXP yvSEXP, SEXP nsSEXP, SEXP rSEXP, SEXP CSEXP, SEXP kSEXP, SEXP n_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_Initialization_step(S, yv, ns, r, C, k, n_parents));
    return rcpp_result_gen;
END_RCPP
}
// LC_ME_step
Rcpp::List LC_ME_step(arma::mat S, arma::colvec yv, int ns, int n, int r, int C, arma::mat V, int k, int maxit, double tol_lk, double tol_theta);
RcppExport SEXP _estDLVM_LC_ME_step(SEXP SSEXP, SEXP yvSEXP, SEXP nsSEXP, SEXP nSEXP, SEXP rSEXP, SEXP CSEXP, SEXP VSEXP, SEXP kSEXP, SEXP maxitSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_ME_step(S, yv, ns, n, r, C, V, k, maxit, tol_lk, tol_theta));
    return rcpp_result_gen;
END_RCPP
}
// LC_LastME_step
Rcpp::List LC_LastME_step(arma::mat S, arma::colvec yv, int ns, int n, int r, int C, arma::mat V, int k, int maxit, double tol_lk, double tol_theta);
RcppExport SEXP _estDLVM_LC_LastME_step(SEXP SSEXP, SEXP yvSEXP, SEXP nsSEXP, SEXP nSEXP, SEXP rSEXP, SEXP CSEXP, SEXP VSEXP, SEXP kSEXP, SEXP maxitSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_LastME_step(S, yv, ns, n, r, C, V, k, maxit, tol_lk, tol_theta));
    return rcpp_result_gen;
END_RCPP
}
// LC_CrossOver_step
Rcpp::List LC_CrossOver_step(int ns, Rcpp::List P, int n_children, int n_parents);
RcppExport SEXP _estDLVM_LC_CrossOver_step(SEXP nsSEXP, SEXP PSEXP, SEXP n_childrenSEXP, SEXP n_parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_CrossOver_step(ns, P, n_children, n_parents));
    return rcpp_result_gen;
END_RCPP
}
// LC_Selection_step
Rcpp::List LC_Selection_step(Rcpp::List PV_p, Rcpp::List PV_c, arma::rowvec fit_p, arma::rowvec fit_c, int n_parents, int n_children);
RcppExport SEXP _estDLVM_LC_Selection_step(SEXP PV_pSEXP, SEXP PV_cSEXP, SEXP fit_pSEXP, SEXP fit_cSEXP, SEXP n_parentsSEXP, SEXP n_childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type PV_p(PV_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type PV_c(PV_cSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type fit_p(fit_pSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type fit_c(fit_cSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_Selection_step(PV_p, PV_c, fit_p, fit_c, n_parents, n_children));
    return rcpp_result_gen;
END_RCPP
}
// LC_Mutation_step
arma::mat LC_Mutation_step(int ns, int k, arma::mat V, double prob_mut);
RcppExport SEXP _estDLVM_LC_Mutation_step(SEXP nsSEXP, SEXP kSEXP, SEXP VSEXP, SEXP prob_mutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type prob_mut(prob_mutSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_Mutation_step(ns, k, V, prob_mut));
    return rcpp_result_gen;
END_RCPP
}
// LC_EEM
Rcpp::List LC_EEM(arma::mat S, arma::colvec yv, int k, double tol_lk, double tol_theta, int maxit, int n_parents, int n_children, double prob_mut, int R);
RcppExport SEXP _estDLVM_LC_EEM(SEXP SSEXP, SEXP yvSEXP, SEXP kSEXP, SEXP tol_lkSEXP, SEXP tol_thetaSEXP, SEXP maxitSEXP, SEXP n_parentsSEXP, SEXP n_childrenSEXP, SEXP prob_mutSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol_lk(tol_lkSEXP);
    Rcpp::traits::input_parameter< double >::type tol_theta(tol_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_children(n_childrenSEXP);
    Rcpp::traits::input_parameter< double >::type prob_mut(prob_mutSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(LC_EEM(S, yv, k, tol_lk, tol_theta, maxit, n_parents, n_children, prob_mut, R));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_estDLVM_HMcat_Temperature", (DL_FUNC) &_estDLVM_HMcat_Temperature, 3},
    {"_estDLVM_HMcat_ComputeLogLik", (DL_FUNC) &_estDLVM_HMcat_ComputeLogLik, 5},
    {"_estDLVM_HMcat_CheckConvergence", (DL_FUNC) &_estDLVM_HMcat_CheckConvergence, 12},
    {"_estDLVM_HMcat_E_step", (DL_FUNC) &_estDLVM_HMcat_E_step, 6},
    {"_estDLVM_HMcat_TE_step", (DL_FUNC) &_estDLVM_HMcat_TE_step, 7},
    {"_estDLVM_HMcat_M_step", (DL_FUNC) &_estDLVM_HMcat_M_step, 10},
    {"_estDLVM_HMcat_EM", (DL_FUNC) &_estDLVM_HMcat_EM, 10},
    {"_estDLVM_HMcat_TEM", (DL_FUNC) &_estDLVM_HMcat_TEM, 12},
    {"_estDLVM_HMcat_Initialization_step", (DL_FUNC) &_estDLVM_HMcat_Initialization_step, 7},
    {"_estDLVM_HMcat_ME_step", (DL_FUNC) &_estDLVM_HMcat_ME_step, 8},
    {"_estDLVM_HMcat_LastME_step", (DL_FUNC) &_estDLVM_HMcat_LastME_step, 8},
    {"_estDLVM_HMcat_CrossOver_step", (DL_FUNC) &_estDLVM_HMcat_CrossOver_step, 5},
    {"_estDLVM_HMcat_Selection_step", (DL_FUNC) &_estDLVM_HMcat_Selection_step, 6},
    {"_estDLVM_HMcat_Mutation_step", (DL_FUNC) &_estDLVM_HMcat_Mutation_step, 5},
    {"_estDLVM_HMcat_EEM", (DL_FUNC) &_estDLVM_HMcat_EEM, 11},
    {"_estDLVM_HMcont_Temperature", (DL_FUNC) &_estDLVM_HMcont_Temperature, 3},
    {"_estDLVM_dmvnorm", (DL_FUNC) &_estDLVM_dmvnorm, 3},
    {"_estDLVM_HMcont_ComputeLogLik", (DL_FUNC) &_estDLVM_HMcont_ComputeLogLik, 5},
    {"_estDLVM_HMcont_CheckConvergence", (DL_FUNC) &_estDLVM_HMcont_CheckConvergence, 14},
    {"_estDLVM_HMcont_E_step", (DL_FUNC) &_estDLVM_HMcont_E_step, 5},
    {"_estDLVM_HMcont_TE_step", (DL_FUNC) &_estDLVM_HMcont_TE_step, 6},
    {"_estDLVM_HMcont_M_step", (DL_FUNC) &_estDLVM_HMcont_M_step, 7},
    {"_estDLVM_HMcont_EM", (DL_FUNC) &_estDLVM_HMcont_EM, 10},
    {"_estDLVM_HMcont_TEM", (DL_FUNC) &_estDLVM_HMcont_TEM, 12},
    {"_estDLVM_HMcont_Initialization_step", (DL_FUNC) &_estDLVM_HMcont_Initialization_step, 6},
    {"_estDLVM_HMcont_ME_step", (DL_FUNC) &_estDLVM_HMcont_ME_step, 7},
    {"_estDLVM_HMcont_LastME_step", (DL_FUNC) &_estDLVM_HMcont_LastME_step, 7},
    {"_estDLVM_HMcont_CrossOver_step", (DL_FUNC) &_estDLVM_HMcont_CrossOver_step, 5},
    {"_estDLVM_HMcont_Selection_step", (DL_FUNC) &_estDLVM_HMcont_Selection_step, 6},
    {"_estDLVM_HMcont_Mutation_step", (DL_FUNC) &_estDLVM_HMcont_Mutation_step, 5},
    {"_estDLVM_HMcont_EEM", (DL_FUNC) &_estDLVM_HMcont_EEM, 10},
    {"_estDLVM_LC_Temperature", (DL_FUNC) &_estDLVM_LC_Temperature, 3},
    {"_estDLVM_LC_CheckConvergence", (DL_FUNC) &_estDLVM_LC_CheckConvergence, 10},
    {"_estDLVM_LC_EM_step", (DL_FUNC) &_estDLVM_LC_EM_step, 11},
    {"_estDLVM_LC_TEM_step", (DL_FUNC) &_estDLVM_LC_TEM_step, 12},
    {"_estDLVM_LC_EM", (DL_FUNC) &_estDLVM_LC_EM, 10},
    {"_estDLVM_LC_TEM", (DL_FUNC) &_estDLVM_LC_TEM, 12},
    {"_estDLVM_LC_Initialization_step", (DL_FUNC) &_estDLVM_LC_Initialization_step, 7},
    {"_estDLVM_LC_ME_step", (DL_FUNC) &_estDLVM_LC_ME_step, 11},
    {"_estDLVM_LC_LastME_step", (DL_FUNC) &_estDLVM_LC_LastME_step, 11},
    {"_estDLVM_LC_CrossOver_step", (DL_FUNC) &_estDLVM_LC_CrossOver_step, 4},
    {"_estDLVM_LC_Selection_step", (DL_FUNC) &_estDLVM_LC_Selection_step, 6},
    {"_estDLVM_LC_Mutation_step", (DL_FUNC) &_estDLVM_LC_Mutation_step, 4},
    {"_estDLVM_LC_EEM", (DL_FUNC) &_estDLVM_LC_EEM, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_estDLVM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
